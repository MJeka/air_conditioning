substitutions:
  board_name: balconyac
  upper_board_name: BalconyAC

esphome:
  includes:
    - panasonic_ir.h
  libraries:
    - IRremoteESP8266

  name: ${board_name}
  platform: ESP8266
  board: d1_mini 
  comment: Wemos D1 mini Balcony Conditioner

wifi:
  ssid: !secret wifi-ssid
  password: !secret wifi-password
  reboot_timeout: 15min
  output_power: 17.5dB
  fast_connect: true
  power_save_mode: none

  # manual_ip:
  #   static_ip: ${ip_address}
  #   gateway: 192.168.10.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.10.1
  #   dns2: 8.8.8.8

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${upper_board_name} Fallback Hotspot"
    password: !secret ap-password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  reboot_timeout: 10min
ota:

web_server:
  port: 80

binary_sensor:
  - platform: status
    name: '${upper_board_name}_Status'
    
  - platform: gpio
    pin:
      number: GPIO5		# D1
      mode: INPUT
    name: ${upper_board_name}_Work_Sensor
    id: power
    filters:
      - delayed_on_off: 3s

sensor:
  - platform: uptime
    name: '${upper_board_name}_Uptime_Sensor'
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${upper_board_name}_WiFi_RSSI
    update_interval: 60s
    
climate:
- platform: custom
  lambda: |-
    auto my_panasonic = new PanasonicAC();
    App.register_component(my_panasonic);
    return {my_panasonic};

  climates:
    - name: '${upper_board_name}'

switch:
  - platform: restart
    name: '${upper_board_name} Restart'

text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: ${upper_board_name} ESPHome Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${upper_board_name}_IP
    ssid:
      name: ${upper_board_name}_SSID
    bssid:
      name: ${upper_board_name}_BSSID
    mac_address:
      name: ${board_name}_MAC

  - platform: template
    name: ${upper_board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

time:
  - platform: homeassistant
    id: homeassistant_time
